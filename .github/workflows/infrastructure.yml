name: Infrastructure Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: "us-east-1"
  TERRAFORM_DIR: "Terraform"
  ANSIBLE_DIR: "Ansible"

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_DIR }}

    steps:
    - uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      run: terraform plan -input=false

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

  ansible:
    name: Ansible Configuration
    needs: terraform
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    defaults:
      run:
        working-directory: ${{ env.ANSIBLE_DIR }}

    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible boto3 botocore

    - name: Install Ansible collections
      run: |
        ansible-galaxy collection install amazon.aws

    - name: Create vault pass file
      run: echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > .vault_pass

    - name: Decrypt private key
      run: |
        echo "${{ secrets.ANSIBLE_PRIVATE_KEY_ENCRYPTED }}" > ../Terraform/zombie_key.encrypted
        ansible-vault decrypt --vault-password-file .vault_pass ../Terraform/zombie_key.encrypted --output ../Terraform/zombie_key
        chmod 600 ../Terraform/zombie_key

    - name: Run Ansible playbook
      run: ansible-playbook configure_webservers.yml
      env:
        ANSIBLE_HOST_KEY_CHECKING: "False"

    - name: Cleanup sensitive files
      if: always()
      run: |
        rm -f .vault_pass ../Terraform/zombie_key ../Terraform/zombie_key.encrypted 