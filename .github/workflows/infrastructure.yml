name: Terraform Infrastructure Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: "us-east-1"
  TERRAFORM_DIR: "Terraform"

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_DIR }}

    steps:
    - uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create Terraform Variables
      run: |
        cat > terraform.tfvars <<EOF
        group_name = "zombie"
        vpc_cidr = "10.0.0.0/16"
        public_subnet_1_cidr = "10.0.1.0/24"
        public_subnet_2_cidr = "10.0.2.0/24"
        public_subnet_3_cidr = "10.0.3.0/24"
        public_subnet_4_cidr = "10.0.4.0/24"
        private_subnet_1_cidr = "10.0.5.0/24"
        private_subnet_2_cidr = "10.0.6.0/24"
        availability_zone_1 = "us-east-1a"
        availability_zone_2 = "us-east-1b"
        availability_zone_3 = "us-east-1c"
        availability_zone_4 = "us-east-1d"
        s3_bucket = "zombies-web-content"
        ami_id = "${{ secrets.AWS_AMI_ID }}"
        instance_type = "t2.micro"
        asg_desired_capacity = 2
        asg_max_size = 4
        asg_min_size = 1
        ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
        EOF

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      run: terraform plan -input=false

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false 