# Network Configuration Files
## network/config.tf
```hcl
terraform {
  backend "s3" {
    bucket = "kevinw-p2"
    key    = "terraform/network/state"
    region = "us-east-1"
  }
}
```

## network/main.tf
```hcl
resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "${var.project_name}-vpc"
  }
}

resource "aws_subnet" "public" {
  count                   = length(var.public_subnet_cidrs)
  vpc_id                  = aws_vpc.main.id
  cidr_block              = var.public_subnet_cidrs[count.index]
  availability_zone       = data.aws_availability_zones.available.names[count.index]
  map_public_ip_on_launch = true

  tags = {
    Name = "${var.project_name}-public-subnet-${count.index + 1}"
  }
}

resource "aws_subnet" "private" {
  count             = length(var.private_subnet_cidrs)
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.private_subnet_cidrs[count.index]
  availability_zone = data.aws_availability_zones.available.names[count.index]

  tags = {
    Name = "${var.project_name}-private-subnet-${count.index + 1}"
  }
}

data "aws_availability_zones" "available" {}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "${var.project_name}-igw"
  }
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "${var.project_name}-public-rt"
  }
}

resource "aws_route_table_association" "public" {
  count          = length(var.public_subnet_cidrs)
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public.id
}

resource "aws_eip" "nat" {
  vpc = true

  tags = {
    Name = "${var.project_name}-nat-eip"
  }
}

resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.public[0].id

  tags = {
    Name = "${var.project_name}-nat"
  }
}

resource "aws_route_table" "private" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat.id
  }

  tags = {
    Name = "${var.project_name}-private-rt"
  }
}

resource "aws_route_table_association" "private" {
  count          = length(var.private_subnet_cidrs)
  subnet_id      = aws_subnet.private[count.index].id
  route_table_id = aws_route_table.private.id
}

resource "aws_security_group" "ecs" {
  name        = "${var.project_name}-ecs-sg"
  description = "Security group for ECS tasks"
  vpc_id      = aws_vpc.main.id

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.project_name}-ecs-sg"
  }
}
```

## network/outputs.tf
```hcl
output "vpc_id" {
  value = aws_vpc.main.id
}

output "public_subnet_id" {
  value = aws_subnet.public[0].id
}

output "private_subnet_id" {
  value = aws_subnet.private[0].id
}

output "ecs_security_group_id" {
  value = aws_security_group.ecs.id
}
```

## network/variables.tf
```hcl
variable "project_name" {
  description = "Name of the project"
  type        = string
  default     = "stock-analysis"
}

variable "vpc_cidr" {
  description = "CIDR block for VPC"
  type        = string
  default     = "10.0.0.0/16"
}

variable "public_subnet_cidrs" {
  description = "CIDR blocks for public subnets"
  type        = list(string)
  default     = ["10.0.1.0/24", "10.0.2.0/24"]
}

variable "private_subnet_cidrs" {
  description = "CIDR blocks for private subnets"
  type        = list(string)
  default     = ["10.0.3.0/24", "10.0.4.0/24"]
}
```

# Services Configuration Files
## services/config.tf
```hcl
terraform {
  backend "s3" {
    bucket = "kevinw-p2"
    key    = "terraform/services/state"
    region = "us-east-1"
  }
}
```

## services/main.tf
```hcl
provider "aws" {
  region = var.aws_region
}

data "terraform_remote_state" "network" {
  backend = "s3"
  config = {
    bucket = "kevinw-p2"
    key    = "terraform/network/state"
    region = "us-east-1"
  }
}

# IAM Role
resource "aws_iam_role" "stock_analysis" {
  name = "StockAnalysisRole"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = [
            "ecs-tasks.amazonaws.com",
            "lambda.amazonaws.com"
          ]
        }
      }
    ]
  })
}

# IAM Policies
resource "aws_iam_role_policy_attachment" "lambda_vpc_access" {
  role       = aws_iam_role.stock_analysis.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
}

resource "aws_iam_role_policy_attachment" "lambda_basic" {
  role       = aws_iam_role.stock_analysis.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

resource "aws_iam_role_policy" "stock_analysis" {
  name = "StockAnalysisPolicy"
  role = aws_iam_role.stock_analysis.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "s3:*",
          "kinesis:*",
          "dynamodb:*",
          "logs:*",
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DeleteNetworkInterface",
          "sagemaker:*"
        ]
        Resource = "*"
      }
    ]
  })
}

# Kinesis Stream
resource "aws_kinesis_stream" "stock_stream" {
  name             = var.kinesis_stream_name
  shard_count      = 1
  retention_period = 24

  tags = {
    Name = var.kinesis_stream_name
  }
}

# DynamoDB Table
resource "aws_dynamodb_table" "stock_table" {
  name           = var.dynamo_table_name
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "stock_symbol"
  range_key      = "timestamp"

  attribute {
    name = "stock_symbol"
    type = "S"
  }

  attribute {
    name = "timestamp"
    type = "N"
  }

  tags = {
    Name = var.dynamo_table_name
  }
}

# ECS Cluster
resource "aws_ecs_cluster" "stock_analysis" {
  name = var.cluster_name

  tags = {
    Name = var.cluster_name
  }
}

# ECR Repository
resource "aws_ecr_repository" "stock_data_collector" {
  name = var.service_name

  tags = {
    Name = var.service_name
  }
}

# ECS Task Definition
resource "aws_ecs_task_definition" "stock_data_collector" {
  family                   = var.task_family
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = "256"
  memory                   = "512"
  execution_role_arn       = aws_iam_role.stock_analysis.arn
  task_role_arn           = aws_iam_role.stock_analysis.arn

  container_definitions = jsonencode([
    {
      name      = var.service_name
      image     = "${aws_ecr_repository.stock_data_collector.repository_url}:latest"
      essential = true
      environment = [
        {
          name  = "KINESIS_STREAM_NAME"
          value = var.kinesis_stream_name
        }
      ]
      logConfiguration = {
        logDriver = "awslogs"
        options = {
          awslogs-group         = "/ecs/${var.service_name}"
          awslogs-region        = var.aws_region
          awslogs-stream-prefix = "ecs"
        }
      }
    }
  ])
}

# ECS Service
resource "aws_ecs_service" "stock_data_collector" {
  name            = var.service_name
  cluster         = aws_ecs_cluster.stock_analysis.id
  task_definition = aws_ecs_task_definition.stock_data_collector.arn
  desired_count   = 1
  launch_type     = "FARGATE"

  network_configuration {
    subnets          = [data.terraform_remote_state.network.outputs.public_subnet_id]
    security_groups  = [data.terraform_remote_state.network.outputs.ecs_security_group_id]
    assign_public_ip = true
  }
}

# CloudWatch Log Group
resource "aws_cloudwatch_log_group" "ecs_logs" {
  name              = "/ecs/${var.service_name}"
  retention_in_days = 30

  tags = {
    Name = "/ecs/${var.service_name}"
  }
}

# Lambda Function
resource "aws_lambda_function" "stock_analysis" {
  function_name = var.lambda_function_name
  role          = aws_iam_role.stock_analysis.arn
  handler       = "index.handler"
  runtime       = "python3.9"
  timeout       = 300
  memory_size   = 512

  s3_bucket = "kevinw-p2"
  s3_key    = "lambda_function.zip"

  environment {
    variables = {
      DYNAMO_TABLE = var.dynamo_table_name,
      SAGEMAKER_ENDPOINT = "${var.sagemaker_model_name}-endpoint"
    }
  }

  layers = [aws_lambda_layer_version.ta_lib.arn]

  tags = {
    Name = var.lambda_function_name
  }
}

# Lambda Layer
resource "aws_lambda_layer_version" "ta_lib" {
  layer_name = "ta_lib_layer"
  compatible_runtimes = ["python3.9"]
  
  s3_bucket = "kevinw-p2"
  s3_key    = "ta_lib_layer.zip"
}
```

## services/outputs.tf
```hcl
output "kinesis_stream_name" {
  value = aws_kinesis_stream.stock_stream.name
}

output "dynamodb_table_name" {
  value = aws_dynamodb_table.stock_table.name
}

output "lambda_function_name" {
  value = aws_lambda_function.stock_analysis.function_name
}

output "ecr_repository_url" {
  value = aws_ecr_repository.stock_data_collector.repository_url
}
```

## services/variables.tf
```hcl
variable "aws_region" {
  description = "AWS region to deploy resources"
  type        = string
  default     = "us-east-1"
}

variable "cluster_name" {
  description = "Name of the ECS cluster"
  type        = string
  default     = "stock-analysis-cluster"
}

variable "service_name" {
  description = "Name of the ECS service"
  type        = string
  default     = "stock-data-collector"
}

variable "task_family" {
  description = "Family name for the ECS task"
  type        = string
  default     = "stock-data-collector"
}

variable "kinesis_stream_name" {
  description = "Name of the Kinesis data stream"
  type        = string
  default     = "stock-stream"
}

variable "dynamo_table_name" {
  description = "Name of the DynamoDB table"
  type        = string
  default     = "stock-table"
}

variable "lambda_function_name" {
  description = "Name of the Lambda function"
  type        = string
  default     = "StockAnalysisLambda"
}

variable "sagemaker_model_name" {
  description = "Name of the SageMaker model"
  type        = string
  default     = "stock-prediction"
}
``` 